"""
Позволяет работать с объектами как с единым целым, образованным из древовидной структуры объектов.

В Python шаблон Компановщик может быть реализован с помощью классов и наследования. Для начала определим базовый класс
Component, который будет определять общий интерфейс для всех компонентов:
"""

class Component:
    def operation(self):
        pass


"""
    Затем определим два типа компонентов: Leaf и Composite. Leaf - это конечный элемент в иерархии, который не имеет 
дочерних элементов, а Composite - это элемент, который содержит другие компоненты в качестве дочерних элементов.
"""

class Leaf(Component):
    def operation(self):
        # реализация операции для листа
        pass

class Composite(Component):
    def __init__(self):
        self.children = []

    def add(self, component):
        self.children.append(component)

    def remove(self, component):
        self.children.remove(component)

    def operation(self):
        # реализация операции для композита
        for child in self.children:
            child.operation()


"""
    Класс Composite содержит список дочерних компонентов и методы для добавления и удаления дочерних элементов. 
Метод operation() выполняет операцию для текущего компонента и рекурсивно вызывает операцию для каждого дочернего 
элемента.
"""

# Пример использования
root = Composite()
leaf1 = Leaf()
leaf2 = Leaf()
composite = Composite()

composite.add(leaf1)
composite.add(leaf2)
root.add(composite)

root.operation()


"""
    В этом примере мы создаем корневой композит root, два листа leaf1 и leaf2, и композит composite, который содержит 
    листы leaf1 и leaf2. Затем мы добавляем композит composite в корневой композит root и вызываем метод operation() для 
корневого композита. Это вызовет операцию для корневого композита, которая в свою очередь вызовет операции для 
композита composite и его дочерних листьев leaf1 и leaf2.

    Шаблон Компановщик позволяет упростить работу с иерархическими структурами объектов, обеспечивая единый интерфейс 
для всех компонентов. В Python он может быть реализован с помощью классов и наследования, что делает его очень гибким и 
удобным в использовании.
"""