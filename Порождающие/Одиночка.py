"""
Гарантирует, что у класса есть только один экземпляр, и предоставляет глобальную точку доступа к этому экземпляру.
"""


class Singleton:
    __instance = None

    def __new__(cls):
        if cls.__instance is None:
            cls.__instance = super().__new__(cls)
        return cls.__instance

    def some_business_logic(self):
        pass


# Пример использования
if __name__ == '__main__':
    s1 = Singleton()
    s2 = Singleton()

    if id(s1) == id(s2):
        print("Singleton works, both variables contain the same instance.")
    else:
        print("Singleton failed, variables contain different instances.")


"""
    В этом примере кода мы имеем класс Singleton, который имеет приватный статический член __instance, 
который хранит единственный экземпляр класса.

    Конструктор класса __new__ проверяет, существует ли экземпляр класса Singleton. Если экземпляр еще не создан, 
он создает новый экземпляр и сохраняет его в статическом члене __instance. Если экземпляр уже создан, 
он возвращает существующий экземпляр.

    Клиентский код может создавать объекты класса Singleton и вызывать его методы, но в любом случае будет 
использоваться только один экземпляр класса. В этом примере кода мы создаем два объекта класса Singleton и проверяем, 
что они содержат один и тот же экземпляр. Если экземпляры разные, то это означает, что паттерн "Одиночка" не работает 
правильно. Если экземпляры одинаковые, то паттерн работает правильно.
"""